/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ctk.vo;

import java.sql.*;
import java.util.*;

import org.apache.ignite.cache.*;
import org.apache.ignite.cache.store.jdbc.*;
import org.apache.ignite.configuration.*;

/**
 * CacheConfig definition.
 *
 * Code generated by Apache Ignite Schema Import utility: 08/18/2016.
 */
public class CacheConfig {
    /**
     * Create JDBC type for departments.
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     */
    private static JdbcType jdbcTypeDepartments(String cacheName) {
        JdbcType jdbcType = new JdbcType();

        jdbcType.setCacheName(cacheName);
        jdbcType.setDatabaseSchema("employees");
        jdbcType.setDatabaseTable("departments");
        jdbcType.setKeyType("com.ctk.vo.DepartmentsKey");
        jdbcType.setValueType("com.ctk.vo.Departments");

        // Key fields for departments.
        Collection<JdbcTypeField> keys = new ArrayList<>();
        keys.add(new JdbcTypeField(Types.CHAR, "dept_no", String.class, "deptNo"));
        jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));

        // Value fields for departments.
        Collection<JdbcTypeField> vals = new ArrayList<>();
        vals.add(new JdbcTypeField(Types.VARCHAR, "dept_name", String.class, "deptName"));
        jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));

        return jdbcType;
    }

    /**
     * Create SQL Query descriptor for departments.
     *
     * @return Configured query entity.
     */
    private static QueryEntity queryEntityDepartments() {
        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("com.ctk.vo.DepartmentsKey");
        qryEntity.setValueType("com.ctk.vo.Departments");

        // Query fields for departments.
        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("deptNo", "java.lang.String");
        fields.put("deptName", "java.lang.String");

        qryEntity.setFields(fields);

        // Aliases for fields.
        Map<String, String> aliases = new HashMap<>();

        aliases.put("deptNo", "dept_no");
        aliases.put("deptName", "dept_name");

        qryEntity.setAliases(aliases);

        // Indexes for departments.
        Collection<QueryIndex> idxs = new ArrayList<>();

        idxs.add(new QueryIndex("deptName", true, "dept_name"));

        idxs.add(new QueryIndex("deptNo", true, "PRIMARY"));

        qryEntity.setIndexes(idxs);

        return qryEntity;
    }

    /**
     * Create JDBC type for employees.
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     */
    private static JdbcType jdbcTypeEmployees(String cacheName) {
        JdbcType jdbcType = new JdbcType();

        jdbcType.setCacheName(cacheName);
        jdbcType.setDatabaseSchema("employees");
        jdbcType.setDatabaseTable("employees");
        jdbcType.setKeyType("com.ctk.vo.EmployeesKey");
        jdbcType.setValueType("com.ctk.vo.Employees");

        // Key fields for employees.
        Collection<JdbcTypeField> keys = new ArrayList<>();
        keys.add(new JdbcTypeField(Types.INTEGER, "emp_no", int.class, "empNo"));
        jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));

        // Value fields for employees.
        Collection<JdbcTypeField> vals = new ArrayList<>();
        vals.add(new JdbcTypeField(Types.DATE, "birth_date", java.sql.Date.class, "birthDate"));
        vals.add(new JdbcTypeField(Types.VARCHAR, "first_name", String.class, "firstName"));
        vals.add(new JdbcTypeField(Types.VARCHAR, "last_name", String.class, "lastName"));
        vals.add(new JdbcTypeField(Types.CHAR, "gender", String.class, "gender"));
        vals.add(new JdbcTypeField(Types.DATE, "hire_date", java.sql.Date.class, "hireDate"));
        jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));

        return jdbcType;
    }

    /**
     * Create SQL Query descriptor for employees.
     *
     * @return Configured query entity.
     */
    private static QueryEntity queryEntityEmployees() {
        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("com.ctk.vo.EmployeesKey");
        qryEntity.setValueType("com.ctk.vo.Employees");

        // Query fields for employees.
        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("empNo", "java.lang.Integer");
        fields.put("birthDate", "java.sql.Date");
        fields.put("firstName", "java.lang.String");
        fields.put("lastName", "java.lang.String");
        fields.put("gender", "java.lang.String");
        fields.put("hireDate", "java.sql.Date");

        qryEntity.setFields(fields);

        // Aliases for fields.
        Map<String, String> aliases = new HashMap<>();

        aliases.put("empNo", "emp_no");
        aliases.put("birthDate", "birth_date");
        aliases.put("firstName", "first_name");
        aliases.put("lastName", "last_name");
        aliases.put("hireDate", "hire_date");

        qryEntity.setAliases(aliases);

        // Indexes for employees.
        Collection<QueryIndex> idxs = new ArrayList<>();

        idxs.add(new QueryIndex("empNo", true, "PRIMARY"));

        qryEntity.setIndexes(idxs);

        return qryEntity;
    }

    /**
     * Configure cache.
     *
     * @param cacheName Cache name.
     * @param storeFactory Cache store factory.
     * @return Cache configuration.
     */
    public static <K, V> CacheConfiguration<K, V> cache(String cacheName, CacheJdbcPojoStoreFactory<K, V> storeFactory) {
        if (storeFactory == null)
             throw new IllegalArgumentException("Cache store factory cannot be null.");

        CacheConfiguration<K, V> ccfg = new CacheConfiguration<>(cacheName);

        ccfg.setCacheStoreFactory(storeFactory);
        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        // Configure JDBC types. 
        Collection<JdbcType> jdbcTypes = new ArrayList<>();

        jdbcTypes.add(jdbcTypeDepartments(cacheName));
        jdbcTypes.add(jdbcTypeEmployees(cacheName));

        storeFactory.setTypes(jdbcTypes.toArray(new JdbcType[jdbcTypes.size()]));

        // Configure query entities. 
        Collection<QueryEntity> qryEntities = new ArrayList<>();

        qryEntities.add(queryEntityDepartments());
        qryEntities.add(queryEntityEmployees());

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }
}
